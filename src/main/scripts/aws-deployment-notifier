#!/usr/bin/env python
# AWS Deployment Notifier - Automate your Stack Updates!
# Copyright 2015 Immobilien Scout GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Use to trigger update for STACK_NAME with arbitrary parameter.

Publishes deployment message on SNS topic and waits for corresponding result message on SQS queue.

Usage:
    aws-deployment-notifier [-d] [-t SNS_ARN] [-q QUEUE_NAME] [-a ACCOUNT] [-s STACK_NAME] [-r SNS_REGION] [-p PARAMS_JSON] [-b RESULT_TOPIC_ARN] [--stack-region=STACK_REGION]

Options:
    -t SNS_ARN      ARN of the SNS topic to send update messages to
    -q QUEUE_NAME   Name of the SQS queue where stack update events are pulled from
    -a ACCOUNT      Account number of the target account
    -s STACK_NAME   Name of the stack to update
    -r REGION       Region of the stack updater [default: eu-west-1]
    -p PARAMS_JSON  Stack parameters in JSON format
    -b RESULT_TOPIC_ARN The Cloudformation Result Topic

    -d              debug output

    --stack-region=STACK_REGION     Region where the stack is located, defaults to REGION

"""

import sys
import logging

from docopt import docopt

from dnot import Notifier, Receiver

arguments = docopt(__doc__)
sns_topic_arn = arguments["-t"]
queue_name = arguments["-q"]
queue_account = arguments["-a"]
stack_name = arguments["-s"]
region = arguments["-r"]
stackRegion = arguments["--stack-region"] if "--stack-region" in arguments else region
params = arguments["-p"]
result_topic = arguments["-b"]
log_level = logging.DEBUG if arguments["-d"] else logging.INFO

logging.basicConfig(format='%(asctime)s %(name)s %(levelname)s %(message)s', datefmt='%Y-%m-%dT%H:%M:%S', level=log_level)
logger = logging.getLogger(__name__)

logger.debug("arguments: {0}".format(arguments))

try:
    Notifier(sns_region=region).publish(sns_topic_arn=sns_topic_arn, stack_name=stack_name, params=params, region=stackRegion, result_topic=result_topic)
    Receiver(queue_name=queue_name, queue_account=queue_account, stack_name=stack_name).wait_for_deployment_result()
except Exception as e:
    logger.exception(e)
    sys.exit(1)
